{"version":3,"sources":["lights/Cell.js","components/TimerWithRef.js","components/TimerTwo.js","components/TitleScreen.js","lights/Board.js","sudoku/Node/Node.js","sudoku/Grid/Grid.js","sudoku/ChoiceBoard/ChoiceBoard.js","sudoku/utility/arrayDeepCopy.js","sudoku/utility/createSudokuGrid.js","sudoku/utility/checkBoard.js","sudoku/utility/checkPlayerWon.js","sudoku/screens/Game/Game.js","2048/util.js","2048/2048.js","snake/Snake.js","snake/Food.js","snake/GameFour.js","GameList.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","_ref","flipCellsAroundMe","isLit","classes","concat","react_default","a","createElement","className","onClick","TimerWithRef","props","timerId","useRef","_useState","useState","_useState2","Object","slicedToArray","count","setCount","useEffect","current","setInterval","c","clearInterval","changeTime","TimerTwo","seconds","setSeconds","_useState3","_useState4","isRunning","id","window","TitleScreen","title","rules","changeStart","Board","_ref$nrows","nrows","_ref$ncols","ncols","_ref$chanceLightStart","chanceLightStartsOn","initialBoard","y","row","x","push","Math","random","createBoard","board","setBoard","timeWon","setTimeWon","_useState5","_useState6","isStarted","setIsStarted","flipCellsAround","coord","oldBoard","_coord$split$map","split","map","Number","_coord$split$map2","flipCell","boardCopy","toConsumableArray","every","cell","tableBoard","_loop","lights_Cell","key","components_TitleScreen","components_TimerWithRef","components_TimerTwo","Node","handleClickCallback","column","isValid","isModifiable","getCellClassName","value","Grid","grid","handleCellClick","rowIndex","columnIndex","sudoku_Node_Node","CHOICES1","ChoiceBoard","setClickValue","selected","choice","selectedClass","arrayDeepCopy","arr","JSON","parse","stringify","isValidNode","col","cellValue","i","x0","floor","y0","j","countSudokuSolution","k","getSudokuGrid","sudokuGrid","solveRandomSudoku","num","emptyCells","suffledCells","sort","index","length","getNode","isHinted","createSudokuGrid","numberGrid","node","getWrongLines","type","wrongLines","Set","dict","hasOwnProperty","call","add","isBoxValid","console","log","getBoxNumber","checkBoard","wrongHorizontal","wrongVertical","wrongBoxes","boxValues","0","1","2","3","4","5","6","7","8","box","getWrongBoxes","has","checkPlayerWon","Game","setGrid","startingGrid","setStartingGrid","clickValue","_useState7","_useState8","newSudokuGrid","sudoku_Grid_Grid","newGrid","render","sudoku_ChoiceBoard_ChoiceBoard","text","getColors","Block","style","background","Twenty","data","setData","includes","alert","addNumber","added","rand1","rand2","cloneDeep","initialize","didWin","oneIndex","display","justifyContent","digit","_2048_Block","b","oldData","slow","fast","oldGrid","newArray","float","emptyGrid","Snake","snakeDots","dot","left","top","Food","getRandomCoordinates","GameFour","food","setFood","setSnakeDots","direction","setDirection","gameRunning","setGameRunning","_useState9","_useState10","_useState11","_useState12","moveSnake","checkIfOutOfBorders","checkIfEat","dots","head","shift","onGameOver","enlargeSnake","newSnake","unshift","checkIfWin","snake_Snake","snake_Food","GameList","lights_Board","screens_Game_Game","_2048_2048","snake_GameFour","App","src_GameList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode","src_App"],"mappings":"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","file":"static/js/main.3c23c27c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit }) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe} />;\n}\n\nexport default Cell;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./TimerWithRef.css\";\n\nfunction TimerWithRef(props) {\n  const timerId = useRef();\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    timerId.current = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n\n\n    return function cleanUpClearTimer() {\n      clearInterval(timerId.current);\n    };\n  }, [timerId]);\n\n  return (\n    <div className=\"Timer-wrapper\">\n      <div className=\"timerContainer\">{props.changeTime(count)}</div>\n    </div>\n  );\n}\n\nexport default TimerWithRef","import React, { useState, useEffect } from \"react\";\n\nfunction TimerTwo() {\n    const [seconds, setSeconds] = useState(0);\n    const [isRunning, setisRunning] = useState(true);\n\n  \n    useEffect(() => {\n      if(isRunning) {\n      const id = window.setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n      // next time the useffect runs, clear the interval\n      // it sees that isRunning is false, but as a consequence it returns the function\n      return () => window.clearInterval(id)\n    } else {\n    }\n  },[isRunning])\n  \n    return <div>\n      {seconds}s\n          </div>;\n  }\n\n\nexport default TimerTwo","import React from \"react\";\n\nimport \"./TitleScreen.css\";\n\nfunction TitleScreen(props) {\n    return (\n        <div className=\"title\">\n            <h1 className=\"titleWords\">{props.title}</h1>\n            <h3 className=\"titleWords\">{props.rules}</h3>\n            <button className=\"titleButton\" onClick={() => props.changeStart(true)}>Start</button>\n        </div>\n    );\n}\n\nexport default TitleScreen","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport TimerWithRef from \"../components/TimerWithRef\";\nimport TimerTwo from \"../components/TimerTwo\";\nimport TitleScreen from \"../components/TitleScreen\"\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 3, ncols = 3, chanceLightStartsOn =.45 }) {\n  const [board, setBoard] = useState(createBoard());\n  const [timeWon, setTimeWon] = useState(0)\n  const [isStarted, setIsStarted] = useState(false)\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n/**    \n * Checks if board has a win. For every row, is ever cell false\n**/\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div className=\"lights\">\n              <h1 className=\"gameTitle\">Lights Out</h1>\n              <div>You Win in {timeWon}s</div>\n            </div>\n  }\n\n  // make table board\n\n  let tableBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  if (isStarted === false) {\n    return <div className=\"lights\">\n      <TitleScreen title=\"Lights Out\" rules=\"Click the boxes to switch the lights around the clicked box. Turn off all lights to win.\" \n        changeStart={isStarted => setIsStarted(true)}\n        />\n    </div>\n  }\n  else {\n  return (\n    <div className=\"lights\">\n        <table className=\"lightsBoard\">\n          <tbody>{tableBoard}</tbody>\n        </table>\n      <TimerWithRef \n          changeTime={timeWon => setTimeWon(timeWon)}\n      />\n      <TimerTwo />\n    </div>\n  );\n}}\n\nexport default Board;\n","import React from \"react\";\nimport \"./Node.css\";\n\nconst Node = (props) => {\n  let { cell, handleClickCallback } = props;\n\n  const getCellClassName = (cell) => {\n    let { row, column } = cell;\n    let className = `cell \n    ${row === 2 || row === 5 ? \"bottom-border\" : \"\"}\n    ${column === 2 || column === 5 ? \"right-border\" : \"\"}\n    ${cell.isValid ? \"\" : \"cell-invalid\"}\n    ${cell.isModifiable ? \"cell-modifiable\" : \"\"}\n    `;\n    return className;\n  };\n\n  return (\n    <td\n      className={getCellClassName(cell)}\n      onClick={() =>\n        handleClickCallback(cell.row, cell.column, cell.isModifiable)\n      }\n    >\n      {cell.value !== 0 ? cell.value : \"\"}\n    </td>\n  );\n};\n\nexport default Node;\n","import React from \"react\";\n// Css files\nimport \"./Grid.css\";\n// Components\nimport Node from \"../Node/Node\";\n\nconst Grid = ({ grid, handleCellClick }) => {\n  return (\n    <table className=\"grid-table\">\n      <tbody>\n        {grid &&\n          grid.map((row, rowIndex) => {\n            return (\n              <tr className=\"row\" key={rowIndex}>\n                {row.map((cell, columnIndex) => {\n                  return (\n                    <Node\n                      key={rowIndex + \"-\" + columnIndex}\n                      cell={cell}\n                      handleClickCallback={handleCellClick}\n                    />\n                  );\n                })}\n              </tr>\n            );\n          })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Grid;\n","import React from \"react\";\nimport \"./ChoiceBoard.css\";\n\nconst CHOICES1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst ChoiceBoard = ({ setClickValue, selected }) => {\n  return (\n    <div className=\"ChoiceBoard\">\n      <div className=\"choice-container\">\n        {CHOICES1.map((choice) => {\n          let selectedClass = choice === selected ? \"selected\" : \"\";\n          return (\n            <div\n              className={`choice ${selectedClass} noSelect `}\n              key={`key-1-${choice}`}\n              onClick={() => setClickValue(choice)}\n            >\n              <p className=\"choice-text\">{choice}</p>\n            </div>\n          );\n        })}\n         <div\n          className={`choice \n                    ${selected === 0 ? \"selected-eraser\" : \"\"} \n                    noSelect`}\n          key={`key-2-${0}`}\n          onClick={() => setClickValue(0)}\n        >\n          <p className=\"choice-text\">⌫</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChoiceBoard;\n","const arrayDeepCopy = (arr) => {\n  let newArray = JSON.parse(JSON.stringify(arr));\n  return newArray;\n};\n\nexport default arrayDeepCopy;","const isValidNode = (row, col, value, board) => {\n  const cellValue = value;\n\n  // Check horizontal\n  for (let i = 0; i < 9; i++) {\n    if (board[row][i] === cellValue) return false;\n  }\n\n  // Check Vertucal\n  for (let i = 0; i < 9; i++) {\n    if (board[i][col] === cellValue) return false;\n  }\n\n  // check box: we have to only check the diagonal of the box\n  let x0 = Math.floor(row / 3) * 3;\n  let y0 = Math.floor(col / 3) * 3;\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[x0 + i][y0 + j] === cellValue) return false;\n    }\n  }\n\n  return true;\n};\n\nconst countSudokuSolution = (board) => {\n  //   console.log(board);\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (board[i][j] === 0) {\n        let count = 0;\n        for (let k = 1; k <= 9; k++) {\n          if (isValidNode(i, j, k, board)) {\n            board[i][j] = k;\n            count += countSudokuSolution(board);\n            board[i][j] = 0;\n          }\n        }\n        return count;\n      }\n    }\n  }\n  return 1;\n};\n\nconst solveRandomSudoku = (board) => {\n  //   console.log(board);\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (board[i][j] === 0) {\n        for (let k = 1; k <= 9; k++) {\n          let num = Math.floor(Math.random() * 9) + 1;\n          if (isValidNode(i, j, num, board)) {\n            board[i][j] = num;\n            if (solveRandomSudoku(board)) return true;\n            board[i][j] = 0;\n          }\n        }\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst getSudokuGrid = () => {\n  let sudokuGrid = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ];\n\n  solveRandomSudoku(sudokuGrid);\n\n  // The method was not having \n  // let emptyPositions = 81;\n  // for (let i = 0; i <emptyPositions; i++) {\n  //   let row = Math.floor(Math.random() * 9);\n  //   let col = Math.floor(Math.random() * 9);\n  //   sudokuGrid[row][col] = 0;\n  // }\n\n  \n  // The min number of filled cell, so that unique solution exists is 17\n  let emptyCells = 6;\n  let suffledCells = [];\n  for (let i = 0; i < 81; i++){\n    suffledCells.push(i);\n  }\n\n  // We are suffling the array to get random ordering of the elements\n  suffledCells.sort(() => Math.random() - 0.5);\n  \n  let index = 0;\n  while(emptyCells <= 51 & index < 81){\n    if(suffledCells.length === 0) break;\n\n    let cell = suffledCells[index];\n    index++;\n\n    let i = Math.floor(cell / 9);\n    let j = cell % 9;\n\n    let value = sudokuGrid[i][j];\n    sudokuGrid[i][j] = 0;\n\n    let count = countSudokuSolution(sudokuGrid);\n    \n    if(count === 1) emptyCells++;\n    else sudokuGrid[i][j] = value;\n  }\n  \n  return sudokuGrid;\n};\n\n// const getSudokuGrid = () => {\n//   let sudokuGrid = [\n//     [5, 3, 0, 0, 7, 0, 0, 0, 0],\n//     [6, 0, 0, 1, 9, 5, 0, 0, 0],\n//     [0, 9, 8, 0, 0, 0, 0, 6, 0],\n\n//     [8, 0, 0, 0, 6, 0, 0, 0, 3],\n//     [4, 0, 0, 8, 0, 3, 0, 0, 1],\n//     [7, 0, 0, 0, 2, 0, 0, 0, 6],\n\n//     [0, 6, 0, 0, 0, 0, 2, 8, 0],\n//     [0, 0, 0, 4, 1, 9, 0, 0, 5],\n//     [0, 0, 0, 0, 8, 0, 0, 7, 9],\n//   ];\n//   return sudokuGrid;\n// };\n\nconst getNode = (row, column, value, isModifiable) => {\n  return {\n    row: row,\n    column: column,\n    value: value,\n    isValid: true,\n    isModifiable: isModifiable,\n    isHinted: false,\n  };\n};\n\nconst createSudokuGrid = () => {\n  const numberGrid = getSudokuGrid();\n  let sudokuGrid = [];\n\n  for (let i = 0; i < 9; i++) {\n    let row = [];\n    for (let j = 0; j < 9; j++) {\n      let isModifiable = numberGrid[i][j] === 0;\n      let node = getNode(i, j, numberGrid[i][j], isModifiable);\n      row.push(node);\n    }\n    sudokuGrid.push(row);\n  }\n\n  return sudokuGrid;\n};\n\nexport default createSudokuGrid;\n","const getWrongLines = (board, type) => {\n  let wrongLines = new Set();\n\n  for (let i = 0; i < 9; i++) {\n    let dict = {};\n\n    for (let j = 0; j < 9; j++) {\n      let key;\n      if (type === \"horizontal\") key = board[i][j].value;\n      else key = board[j][i].value;\n\n      if (key === 0) continue;\n\n      if (Object.hasOwnProperty.call(dict, key)) {\n        dict[key] += 1;\n        if (dict[key] > 1) {\n          wrongLines.add(i);\n          break;\n        }\n      } else dict[key] = 1;\n    }\n  }\n  return wrongLines;\n};\n\nconst isBoxValid = (board,x0,y0) => {\n  let dict = {};\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      let key = board[x0 + i][y0 + j].value;\n      if (key === 0) continue;\n\n      if (Object.hasOwnProperty.call(dict, key)) {\n        dict[key] += 1;\n        if (dict[key] > 1) {\n          console.log(x0,y0);\n          return false;\n        }\n      } else dict[key] = 1;\n    }\n  }\n  return true;\n}\n\nconst getWrongBoxes = (board) => {\n  let wrongBoxes = new Set();\n  let boxValues = {\n    0: { x: 0,y: 0 },\n    1: { x: 0,y: 3 },\n    2: { x: 0,y: 6 },\n    3: { x: 3,y: 0 },\n    4: { x: 3,y: 3 },\n    5: { x: 3,y: 6 },\n    6: { x: 6,y: 0 },\n    7: { x: 6,y: 3 },\n    8: { x: 6,y: 6 },\n  };\n\n  // We check for every boxes\n  for (let box = 0; box < 9; box++) {\n    // Now check all cells of the selected box\n    let x0 = boxValues[box].x;\n    let y0 = boxValues[box].y;\n\n    if(!isBoxValid(board,x0,y0)) {\n      wrongBoxes.add(box);\n    }\n  }\n\n  return wrongBoxes;\n};\n\nconst getBoxNumber = (x, y) => {\n  let x0 = Math.floor(x / 3);\n  let y0 = Math.floor(y / 3);\n  let BoxNumber = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n  ][x0][y0];\n  return BoxNumber;\n};\n\nconst checkBoard = (board) => {\n  // Check for the Horizontal\n  // we will check all the board\n\n  let wrongHorizontal = getWrongLines(board, \"horizontal\");\n  let wrongVertical = getWrongLines(board, \"vertical\");\n  let wrongBoxes = getWrongBoxes(board);\n\n  console.log(getBoxNumber(1,5));\n  console.log(wrongBoxes);\n\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (\n        wrongHorizontal.has(i) ||\n        wrongVertical.has(j) ||\n        wrongBoxes.has(getBoxNumber(i,j))\n      ) {\n        board[i][j].isValid = false;\n      } else {\n        board[i][j].isValid = true;\n      }\n    }\n  }\n};\n\nexport default checkBoard;\n","const checkPlayerWon = (board) => {\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++){\n            if(board[i][j].value === 0 || board[i][j].isValid === false){\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nexport default checkPlayerWon;","import React, { useEffect, useState } from \"react\";\nimport Grid from \"../../Grid/Grid.js\"\nimport ChoiceBoard from \"../../ChoiceBoard/ChoiceBoard.js\"\nimport TimerTwo from \"../../../components/TimerTwo\";\nimport TitleScreen from \"../../../components/TitleScreen\"\n\nimport \"./Game.css\";\n\nimport {\n  arrayDeepCopy,\n  checkBoard,\n  checkPlayerWon,\n  createSudokuGrid,\n} from \"../../utility\";\n\nimport { render } from \"@testing-library/react\";\n\n\nconst Game = () => {\n  const [grid, setGrid] = useState(null);\n  const [startingGrid, setStartingGrid] = useState(null);\n  const [clickValue, setClickValue] = useState(1);\n  const [isStarted, setIsStarted] = useState(false)\n\n\n  useEffect(() => {\n    if (grid == null && startingGrid == null) {\n      let newSudokuGrid = createSudokuGrid();\n      setStartingGrid(arrayDeepCopy(newSudokuGrid));\n      setGrid(arrayDeepCopy(newSudokuGrid));\n    }\n  }, [grid, startingGrid, setStartingGrid, setGrid]);\n\n\n  const handleNewGame = () => {\n    // Making new grid\n    let newSudokuGrid = createSudokuGrid();\n    setStartingGrid(arrayDeepCopy(newSudokuGrid));\n    setGrid(arrayDeepCopy(newSudokuGrid));\n\n  };\n\n  const handleClearBoard = () => {\n    setGrid(arrayDeepCopy(startingGrid));\n  }\n\n  const handleCellClick = (row, column) => {\n\n\n    let newGrid = arrayDeepCopy(grid);\n    newGrid[row][column].value = clickValue;\n\n    // Marking the node valid or invalid depending on the grid\n    checkBoard(newGrid);\n\n    // Checking if the player has won\n    let playerWon = checkPlayerWon(newGrid);\n    if (playerWon) {\n      console.log(\" you win \")\n      render(<div>You Win in: s</div>)\n    }\n\n    // setting the value to the grid and also to the local storage\n    setGrid(newGrid);\n  };\n\n  if (isStarted === false) {\n    return <div className=\"Game\">\n        <TitleScreen title=\"Sudoku\" rules=\"Enter numbers so each row, column, and 9x9 section contains 1 of each number.\" \n        changeStart={isStarted => setIsStarted(true)}\n        />\n        \n        </div>\n        }\n        else {\n  return (\n    <div className=\"Game\">\n      <Grid handleCellClick={handleCellClick} grid={grid} />\n      <ChoiceBoard setClickValue={setClickValue} selected={clickValue} />\n      <div className=\"action-container\">\n        <button\n          onClick={handleClearBoard}\n          text=\"Clear\"\n        >Clear</button>\n        <TimerTwo />\n        <button\n          onClick={handleNewGame}\n          text=\"New Game\"\n        >New Game</button>\n      </div>\n    </div>\n  ); }\n};\n\nexport default Game;\n","\nexport const getColors = (num) => {\n    switch (num) {\n      case 2:\n        return \"#d8ff00\";\n      case 4:\n        return \"#a2f03f\";\n      case 8:\n        return \"#87e85f\";\n      case 16:\n        return \"#70e27a\";\n      case 32:\n        return \"#36d2bf\";\n      case 64:\n        return \"#00c3ff\";\n      case 128:\n        return \"#3f92e8\";\n      case 256:\n        return \"#5780df\";\n      case 512:\n        return \"#7a65d2\";\n      case 1024:\n        return \"#aa41c0\";\n      case 2048:\n        return \"#ff00a1\";\n      default:\n        return \"#bebebe\";\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { cloneDeep } from \"lodash\";\nimport \"./2048.css\"\nimport { getColors } from \"./util\";\nimport TimerWithRef from \"../components/TimerWithRef\";\nimport TimerTwo from \"../components/TimerTwo\";\nimport TitleScreen from \"../components/TitleScreen\"\n\nfunction Twenty() {\n    const [data, setData] = useState([\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n    ]);\n    const [isStarted, setIsStarted] = useState(false);\n    const [timeWon, setTimeWon] = useState(0);\n\n\n    if(data.includes(0)){\n        alert(\"you win\")\n        return <div>You Win in </div>;\n    }\n    // initialize\n    const initialize = () => {\n        let newGrid = cloneDeep(data);\n        //setting a new set with the new grid\n\n        addNumber(newGrid);\n        addNumber(newGrid);\n        setData(newGrid)\n    }\n\n    // addNumber\n    const addNumber = (newGrid) => {\n        let added = false;\n        let gridFull = false;\n\n        while(!added) {\n            if (gridFull) {\n                break;\n            }\n            let rand1 = Math.floor(Math.random() * 4);\n            let rand2 = Math.floor(Math.random() * 4);\n            if (newGrid[rand1][rand2] === 0) {\n                newGrid[rand1][rand2] = Math.random() > 0.5 ? 2 : 4;\n                added = true;\n            }\n        }\n    }\n\n    // swipe\n    const swipeLeft = () => {\n    let oldGrid = data;\n    let newArray = cloneDeep(data);\n\n    for (let i = 0; i < 4; i++) {\n      let b = newArray[i];\n      let slow = 0;\n      let fast = 1;\n      while (slow < 4) {\n        if (fast === 4) {\n          fast = slow + 1;\n          slow++;\n          continue;\n        }\n        if (b[slow] === 0 && b[fast] === 0) {\n          fast++;\n        } else if (b[slow] === 0 && b[fast] !== 0) {\n          b[slow] = b[fast];\n          b[fast] = 0;\n          fast++;\n        } else if (b[slow] !== 0 && b[fast] === 0) {\n          fast++;\n        } else if (b[slow] !== 0 && b[fast] !== 0) {\n          if (b[slow] === b[fast]) {\n            b[slow] = b[slow] + b[fast];\n            b[fast] = 0;\n            fast = slow + 1;\n            slow++;\n          } else {\n            slow++;\n            fast = slow + 1;\n          }\n        }\n      }\n    }\n    if (JSON.stringify(oldGrid) !== JSON.stringify(newArray)) {\n      addNumber(newArray);\n    }\n      setData(newArray);\n    };\n\n    const swipeRight = () => {\n        let oldData = data;\n        let newArray = cloneDeep(data);\n    \n        for (let i = 3; i >= 0; i--) {\n          let b = newArray[i];\n          let slow = b.length - 1;\n          let fast = slow - 1;\n          while (slow > 0) {\n            if (fast === -1) {\n              fast = slow - 1;\n              slow--;\n              continue;\n            }\n            if (b[slow] === 0 && b[fast] === 0) {\n              fast--;\n            } else if (b[slow] === 0 && b[fast] !== 0) {\n              b[slow] = b[fast];\n              b[fast] = 0;\n              fast--;\n            } else if (b[slow] !== 0 && b[fast] === 0) {\n              fast--;\n            } else if (b[slow] !== 0 && b[fast] !== 0) {\n              if (b[slow] === b[fast]) {\n                b[slow] = b[slow] + b[fast];\n                b[fast] = 0;\n                fast = slow - 1;\n                slow--;\n              } else {\n                slow--;\n                fast = slow - 1;\n              }\n            }\n          }\n        }\n        if (JSON.stringify(newArray) !== JSON.stringify(oldData)) {\n          addNumber(newArray);\n        }\n          setData(newArray);\n      };\n    \n      const swipeDown = () => {\n        let b = cloneDeep(data);\n        let oldData = JSON.parse(JSON.stringify(data));\n        for (let i = 3; i >= 0; i--) {\n          let slow = b.length - 1;\n          let fast = slow - 1;\n          while (slow > 0) {\n            if (fast === -1) {\n              fast = slow - 1;\n              slow--;\n              continue;\n            }\n            if (b[slow][i] === 0 && b[fast][i] === 0) {\n              fast--;\n            } else if (b[slow][i] === 0 && b[fast][i] !== 0) {\n              b[slow][i] = b[fast][i];\n              b[fast][i] = 0;\n              fast--;\n            } else if (b[slow][i] !== 0 && b[fast][i] === 0) {\n              fast--;\n            } else if (b[slow][i] !== 0 && b[fast][i] !== 0) {\n              if (b[slow][i] === b[fast][i]) {\n                b[slow][i] = b[slow][i] + b[fast][i];\n                b[fast][i] = 0;\n                fast = slow - 1;\n                slow--;\n              } else {\n                slow--;\n                fast = slow - 1;\n              }\n            }\n          }\n        }\n        if (JSON.stringify(b) !== JSON.stringify(oldData)) {\n          addNumber(b);\n        }\n          setData(b);\n      };\n    \n      const swipeUp = () => {\n        let b = cloneDeep(data);\n        let oldData = JSON.parse(JSON.stringify(data));\n        for (let i = 0; i < 4; i++) {\n          let slow = 0;\n          let fast = 1;\n          while (slow < 4) {\n            if (fast === 4) {\n              fast = slow + 1;\n              slow++;\n              continue;\n            }\n            if (b[slow][i] === 0 && b[fast][i] === 0) {\n              fast++;\n            } else if (b[slow][i] === 0 && b[fast][i] !== 0) {\n              b[slow][i] = b[fast][i];\n              b[fast][i] = 0;\n              fast++;\n            } else if (b[slow][i] !== 0 && b[fast][i] === 0) {\n              fast++;\n            } else if (b[slow][i] !== 0 && b[fast][i] !== 0) {\n              if (b[slow][i] === b[fast][i]) {\n                b[slow][i] = b[slow][i] + b[fast][i];\n                b[fast][i] = 0;\n                fast = slow + 1;\n                slow++;\n              } else {\n                slow++;\n                fast = slow + 1;\n              }\n            }\n          }\n        }\n        if (JSON.stringify(oldData) !== JSON.stringify(b)) {\n          addNumber(b);\n        }\n          setData(b);\n      };\n\n\n      const didWin = () => {\n        if(JSON.stringify(data).includes(2048)){\n            return true\n        } \n    }\n\n    // reset\n    const resetGame = () => {\n        const emptyGrid = [\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n        ];\n    \n        addNumber(emptyGrid);\n        addNumber(emptyGrid);\n        setData(emptyGrid);\n      };\n\n    useEffect(() => {\n        initialize();\n    }, []);\n\n    // checkWin\n    if(didWin()) {\n      return <div className=\"forty\">\n                <h1 className=\"gameTitle\">2048</h1>\n                <div>You Win in {timeWon}s</div>\n            </div>\n    }\n\n    if (isStarted === false) {\n      return <div className=\"forty\">\n        <TitleScreen title=\"2048\" rules=\"Combine like numbers by moving all cells in a direction. Create the number 2048 to win.\" \n        changeStart={isStarted => setIsStarted(true)}\n        />\n      </div>\n    }\n    else {\n    return (\n        <div className=\"forty\">\n            <div className=\"twentyBoard\">\n            {data.map((row, oneIndex) => {\n                return (\n                    <div className=\"gameRow\" style={{ display: \"flex\", \"justifyContent\": \"center\" }} key={oneIndex}>\n                        {row.map((digit, index) => (\n                            <Block num={digit} key={index} />\n                        ))}\n                    </div>\n                );\n            })}\n            </div>\n            <button onClick={swipeUp}>↑</button>\n            <br></br>\n            <button onClick={swipeLeft} style={{float: \"center\"}}>←</button>\n            <button onClick={swipeDown}>↓</button>\n            <button onClick={swipeRight}>→</button>\n            <TimerTwo />\n            <TimerWithRef \n          changeTime={timeWon => setTimeWon(timeWon)}/>\n            <br></br>\n            <button onClick={resetGame} style={{float: \"right\"}}>Restart</button>\n        </div>\n    );\n}   }\n\nconst Block = ({num}) => {\n    return <div style={{background: getColors(num)}} className=\"blockstyle\">{num !== 0 ? num : \"\"}</div>\n}\n\n\nexport default Twenty;","import React from 'react';\nimport \"./gamefour.css\";\n\nfunction Snake(props) {\n  return (\n    <div>\n      {props.snakeDots.map((dot, i) => {\n        const style = {\n          left: `${dot[0]}%`,\n          top: `${dot[1]}%`\n        }\n        return (\n          <div className=\"snake-dot\" key={i} style={style}></div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Snake","import React from 'react';\n\nfunction Food(props) {\n\n  const style = {\n    left: `${props.dot[0]}%`,\n    top: `${props.dot[1]}%`\n  }\n\n  return (\n    <div className=\"snake-food\" style={style}></div>\n  )\n}\n\nexport default Food","import React, { useState, useEffect } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\nimport TimerWithRef from \"../components/TimerWithRef\";\nimport TimerTwo from \"../components/TimerTwo\";\nimport TitleScreen from \"../components/TitleScreen\"\n\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\n\nfunction GameFour() {\n  let [food, setFood] = useState(getRandomCoordinates());\n  let [snakeDots, setSnakeDots] = useState([[0,0],[2,0]])\n  let [direction, setDirection] = useState(\"right\")\n  let [gameRunning, setGameRunning] = useState(true)\n  const [isStarted, setIsStarted] = useState(false)\n  const [timeWon, setTimeWon] = useState(0)\n\n\n\nuseEffect(() => {\n  const id = setInterval(()=> {\n    if(gameRunning === true) {\n      moveSnake();\n    checkIfOutOfBorders();\n    checkIfEat();\n    }\n    \n    \n  }, 250)\n\n  return function cleanUp(){\n    clearInterval(id)\n  }\n}, [snakeDots])\n\nconst moveSnake = () => {\n    let dots = [...snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (direction) {\n      case 'right':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'left':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'down':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'up':\n        head = [head[0], head[1] - 2];\n        break;\n    }\n\n    dots.push(head);\n    dots.shift();\n    setSnakeDots(dots)\n  }\n\n  const checkIfWin = () => {\n    if (snakeDots.length > 9){\n      return true\n    }\n  }\n\n  let checkIfOutOfBorders = () => {\n    let head = snakeDots[snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      onGameOver();\n    }\n  }\n\n  const checkIfEat = () => {\n    let head = snakeDots[snakeDots.length - 1];\n    if (head[0] === food[0] && head[1] === food[1]) {\n      setFood(getRandomCoordinates())        \n      enlargeSnake();\n      }\n\n  }\n\n  const enlargeSnake = () => {\n    let newSnake = [...snakeDots];\n    newSnake.unshift([])\n    setSnakeDots(newSnake)\n  }\n\n  const onGameOver = () => {\n    setGameRunning(false)\n  }\n\n  if (checkIfWin()){\n    return <div className=\"fourth\">\n              <h1 className=\"gameTitle\">Snake</h1>\n              <div>You Win in {timeWon}s</div>\n            </div>\n  }\n\n  if (isStarted === false) {\n    return <div className=\"fourth\">\n      <TitleScreen title=\"Snake\" rules=\"Use the arrows to direct the snake to food. Eat 10 meals to win.\" \n        changeStart={isStarted => setIsStarted(true)}\n        />\n    </div>\n  } \n  else {\n    return (\n      <div className=\"fourth\">\n        <div className=\"game-area\">\n          <Snake snakeDots={snakeDots}/>\n          <Food dot={food}/>\n        </div>\n        <div>Current Length: {snakeDots.length}</div>\n          <div className=\"buttons\">\n              <button onClick={() => {setDirection(\"up\")}}>↑</button>\n              <br></br>\n              <button onClick={() => {setDirection(\"left\")}}>←</button>\n              <button onClick={() => {setDirection(\"down\")}}>↓</button>\n              <button onClick={() => {setDirection(\"right\")}}>→</button>\n              <br></br>\n              <TimerWithRef \n          changeTime={timeWon => setTimeWon(timeWon)}/>\n              <TimerTwo />\n              <button style={{float: \"right\"}}>Restart</button>\n          </div>\n      </div>\n  )\n}}\n\nexport default GameFour;","import React from 'react';\nimport Board from \"./lights/Board\";\nimport Game from \"./sudoku/screens/Game/Game\"\nimport Twenty from \"./2048/2048\"\nimport GameFour from \"./snake/GameFour\"\n\n\nimport \"./GameList.css\"\n\nfunction GameList() {\n    return (\n      <div className=\"GameList\">\n          <Board />\n          <Game />\n          <Twenty />\n          <GameFour />\n        </div>\n    );\n  }\n\nexport default GameList","import React from \"react\";\nimport GameList from \"./GameList\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameList />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}